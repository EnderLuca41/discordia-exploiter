using Discordia.Lib.Types;
using Discordia.Lib.Exceptions;
using DSharpPlus;
using DSharpPlus.Entities;
using DSharpPlus.Exceptions;
using System.Threading.Tasks;

namespace Discordia.Lib.Discord;

public static class UserInteraction
{
    /// <exception cref="ArgumentException">If index is negative</exception>
    /// <exception cref="UserNotFoundException">Gets thrown when the user does not exist</exception>
    /// <exception cref="IndexOutOfRangeException">If <paramref name="serverIndex"/> is not present in the server list</exception>
    /// <exception cref="UnauthorizedAccessException">Get thrown when the GUILD_MEMBERS Intent is not activated</exception>
    /// <exception cref="ServerErrorException">Thrown when discord is unable to process the request</exception>
    public static async Task<IEnumerable<DiscordMember>> GetMembersList(DiscordClient client, int serverIndex)
    {
        if(serverIndex < 0)
            throw new ArgumentException("Index must be positive");

        if(client.Guilds.Count <= serverIndex)
            throw new IndexOutOfRangeException("Index is not present in the server list");
        
        if(!client.Intents.HasFlag(DiscordIntents.GuildMembers))
            throw new UnauthorizedAccessException("GUILD_MEMBERS intent is not activated");
        
        var server = client.Guilds.Values.ElementAt(serverIndex);
        return await server.GetAllMembersAsync();
    }

    
    /// <exception cref="UserNotFoundException">Gets thrown when the user does not exist</exception>
    public static BasicUserInfo GetBasicUserInfo(IEnumerable<DiscordUser> discordMembers, DiscordUsername username)
    {

        var user = discordMembers
            .SingleOrDefault(user => user.Username == username.Name && user.Discriminator == username.Discriminator);
        
        if(user == default)
            throw new UserNotFoundException("The Specified user does not exist");

        return new BasicUserInfo(user.Id, user.Username, user.Discriminator,
            user.Email, user.Flags, user.IsBot,
            user.IsSystem, user.Locale, user.MfaEnabled,
            user.OAuthFlags, user.PremiumType, user.Verified);
    }

    /// <exception cref="ServerErrorException">Thrown when discord is unable to process the request</exception>
    /// <exception cref="UnauthorizedAccessException">Get thrown when the GUILD_MEMBERS Intent is not activated</exception>
    public async static Task<UserSameServer> GetSameServer(DiscordClient client, DiscordUsername username)
    {
        if(!client.Intents.HasFlag(DiscordIntents.GuildMembers))
            throw new UnauthorizedAccessException("GUILD_MEMBERS Intent is not activated");
        

        List<(string serverName, int index)> sameServer = new();

        var guilds = client.Guilds.Values.ToArray();
        for(int i = 0; i < guilds.Length; i++)
        {
            bool containsUser = (await guilds[i].GetAllMembersAsync())
                 .Any(user => user.Username == username.Name && user.Discriminator == username.Discriminator);
            
            if(!containsUser)
                continue;
            
            sameServer.Add((guilds[i].Name, i));
        }
    
        return new UserSameServer(sameServer);
    }

    /// <exception cref="UserNotFoundException">Gets thrown when the user does not exist</exception>
    public static UserBannerInfo GetBannerInfo(IEnumerable<DiscordUser> discordUser, DiscordUsername username)
    {
        var user = discordUser
            .SingleOrDefault(user => user.Username == username.Name && user.Discriminator == username.Discriminator);

        if(user == default)
            throw new UserNotFoundException("The specfied user does not exist");
        
        return new UserBannerInfo(user.BannerColor, user.BannerHash, user.BannerUrl);
    }
    /// <exception cref="UserNotFoundException">Gets thrown when the user does not exist</exception>
    public static UserAvatarInfo GetAvatarInfo(IEnumerable<DiscordUser> discordUser, DiscordUsername username)
    {
        var user = discordUser
            .SingleOrDefault(user => user.Username == username.Name && user.Discriminator == username.Discriminator);

        if(user == default)
            throw new UserNotFoundException("The specfied user does not exist");
        
        return new UserAvatarInfo(user.AvatarHash, user.AvatarUrl, user.DefaultAvatarUrl);
    }

    /// <exception cref="UserNotFoundException">Gets thrown when the user does not exist</exception>
    public static UserRolesInfo GetRolesInfo(IEnumerable<DiscordMember> discordMembers, DiscordUsername username)
    {
        var user = discordMembers
            .SingleOrDefault(user => user.Username == username.Name && user.Discriminator == username.Discriminator);

        if(user == default)
            throw new UserNotFoundException("The specfied user does not exist");
        
        List<DiscordRoleInfo> roles = new();

        foreach(var role in user.Roles)
        {
            roles.Add(new DiscordRoleInfo(role.Name, role.Color, role.Permissions, 
                role.IconUrl, role.IconHash, role.IsHoisted, 
                role.Position, role.IsManaged, role.IsMentionable));
        }

        return new UserRolesInfo(roles);
    }
}